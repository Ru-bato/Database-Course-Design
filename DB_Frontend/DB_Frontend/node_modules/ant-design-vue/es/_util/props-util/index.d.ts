import { camelize } from '../util';
import initDefaultProps from './initDefaultProps';
import type { VueInstance } from '../hooks/_vueuse/unrefElement';
declare const splitAttrs: (attrs: any) => {
    onEvents: Record<string, any>;
    events: Record<string, any>;
    extraAttrs: Record<string, any>;
};
declare const parseStyleText: (cssText?: string, camel?: boolean) => {};
declare const hasProp: (instance: any, prop: string) => boolean;
export declare const skipFlattenKey: unique symbol;
declare const flattenChildren: (children?: any[], filterEmpty?: boolean) => any[];
declare const getSlot: (self: any, name?: string, options?: {}) => any[];
declare const findDOMNode: (instance: any) => any;
declare const getOptionProps: (instance: VueInstance) => {};
declare const getComponent: (instance: any, prop?: string, options?: any, execute?: boolean) => any;
declare const getKey: (ele: any) => any;
export declare function getEvents(ele?: any, on?: boolean): Record<string, any>;
export declare function getClass(ele: any): {};
export declare function getStyle(ele: any, camel?: boolean): any;
export declare function getComponentName(opts: any): any;
export declare function isFragment(c: any): boolean;
export declare function isEmptyContent(c: any): boolean;
export declare function isEmptyElement(c: any): boolean;
export declare function isEmptySlot(c: any): any;
export declare function isStringElement(c: any): boolean;
export declare function filterEmpty(children?: any[]): any[];
export declare function filterEmptyWithUndefined(children: any[]): any[];
declare function isValidElement(element: any): boolean;
declare function getPropsSlot(slots: any, props: any, prop?: string): any;
export declare const getTextFromElement: (ele: any) => any;
export { splitAttrs, hasProp, getOptionProps, getComponent, getKey, parseStyleText, initDefaultProps, isValidElement, camelize, getSlot, findDOMNode, flattenChildren, getPropsSlot, };
export default hasProp;
